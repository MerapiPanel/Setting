{% extends "@panel/base.html.twig" %}
{% block header_title %}Systems | Update{% endblock %}
{% block subheader_outer %}{% endblock %}

{% set modules = _box.Setting.Module.listpops %}

{% block content %}

<div class="m-3" id="main_box">
    <div class="d-flex shadow-sm p-3 rounded-3 bg-white">
        <div class="pe-4">
            <svg fill="#2a7fff" width="50" height="50" version="1.1" viewBox="0 0 140.6 99.995" xml:space="preserve"
                xmlns="http://www.w3.org/2000/svg">
                <g transform="matrix(.91572 0 0 .95557 -21.347 -76.699)">
                    <path transform="scale(.26458)"
                        d="m446.52 303.37c-64.459 89.896-64.806 90.115-64.806 90.115s0.20321 0.16617-40.67-44.482c-268.34 371.11 14.227-19.632-252.94 349.87l0.01612 8e-3c122.92 6e-3 79.294-0.0114 120.16-8e-3 155.46-217.3-8.9653 12.496 147.2-205.78 23.788 26.262 23.676 26.165 23.676 26.165s0.1963-0.13273 37.711-53.01c129.43 233.15-0.33959-0.63941 129.14 232.61 41.345-8e-3 -4.2861 7e-3 122.4-8e-3 -222.55-396.68 0.51175 0.92272-221.9-395.48z" />
                </g>
            </svg>
        </div>
        <div class="flex-grow-1">
            <div class="fw-semibold fs-5">MerapiPanel</div>
            <div>
                <span class="badge bg-warning">tag {{manifest.version}}</span>
            </div>
        </div>
        <button id="check-update-btn" class="btn btn-secondary" onclick="checkForUpdate()">Check Update</button>
    </div>
    <div id="main_box-markdown" style="max-height: 300px; overflow: auto;display:flex;flex-direction: column;">
        <div class="d-flex justify-content-center align-items-center flex-grow-1 text-muted fw-semibold fs-4"
            style="height: 250px;">
            <i class="fa fa-spinner fa-spin me-2"></i> Loading...
        </div>
    </div>
</div>

<div class="mx-lg-4 mx-1">
    <div class="mb-3">
        <div class="fw-semibold fs-5">Modules in your system.</div>
        <small>total {{modules|length}} modules</small>
    </div>
    {% for module in modules %}
    {% set manifest = module.manifest %}
    <div class="bg-white d-flex shadow-sm p-3 rounded-2 mb-3 position-relative">
        {% if module.active %}
        <i class="fa fa-circle text-success position-absolute"></i>
        {% endif %}

        <div class="mx-3 pt-2">
            <img width="30" height="30" src="{{manifest.icon}}" alt="">
        </div>
        <div class="flex-grow-1">
            <a class="text-decoration-none fw-bold"
                href="{{('settings/module/view-'~(module.name|base64_encode))|access_path}}">{{manifest.name}} <span
                    class="badge bg-warning ms-3">tag {{manifest.version}}</span></a>
            <p class="mb-0" style="font-size: smaller;">{{manifest.description}}</p>
            {% if manifest.github %}
            <a href="https://github.com/{{manifest.github.user}}/{{manifest.github.repo}}" target="_blank"><i
                    class="fa-brands fa-github"></i> {{manifest.github.user}}/{{manifest.github.repo}}</a>
            {% endif %}
        </div>
        <button class="btn btn-outline-secondary mb-2" onclick="checkUpdateForModule('{{module.name}}')"
            id="btn-update-{{module.name}}">Check Update</button>
    </div>
    {% endfor %}
</div>
{% endblock %}

{% block javascript %}
{{parent()}}
<script src="https://unpkg.com/showdown/dist/showdown.min.js"></script>
<script>

    function toLocaleString(isoDate) {
        const date = new Date(isoDate);

        // Extract date components
        const options = { month: 'long' };
        const month = date.toLocaleString('default', options);
        const day = date.getDate();
        const year = date.getFullYear();
        const hours = date.getHours();
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        const ampm = hours >= 12 ? 'PM' : 'AM';
        const formattedHours = (hours % 12 || 12).toString().padStart(2, '0');

        // Format the date string
        const formattedDate = `${month}/${day}/${year}, ${formattedHours}:${minutes}:${seconds} ${ampm}`;
        return formattedDate;

    }

    function checkForUpdate() {
        __.http.get("{{'settings/check-update'|access_path}}")
            .then((result) => handleCheckUpdateResult(result.data)).catch((err) => {
                __.toast(err.message || "Failed to check update", 5, 'text-danger');
                $("#main_box-markdown").html('').append(
                    $(`<div class='p-3 text-danger'>`)
                        .append(
                            $(`<div class="fw-semibold fs-5">Caught an Error</div>`),
                            `<div class='border p-3 bg-danger bg-opacity-10'>${err.message || "Failed to check update"}</div>`,
                        )
                )
            });
    }

    function handleCheckUpdateResult(data) {
        let $container = $("#main_box");
        if (data.available == 0) {
            $("#check-update-btn").text("it's the latest version ðŸŽ‰").attr("disabled", "true").toggleClass("btn-secondary btn-success");
        } else if (data.available > 0) {
            $("#check-update-btn")
                .text("Update Available")
                .removeAttr("onclick")
                .off("click").on("click", startUpdate)
                .toggleClass("btn-secondary btn-primary");
        }
        var converter = new showdown.Converter(), text = data.lastest.body, html = converter.makeHtml(text);
        $container.find("#main_box-markdown").html('').append(
            $(`<div class='p-3'>`)
                .append(
                    $(`<div class="fw-semibold fs-5">${data.lastest.name}</div>`),
                    `<small>${toLocaleString(data.lastest.published_at)}</small>`,
                    `<div class='border p-3'>${html}</div>`,
                    `<a class="d-block" href='${data.lastest.html_url}' target='_blank'>${data.lastest.html_url}</a>`
                )
        )
    }

    function startUpdate() {

        const $this = $(this);
        $this.removeClass("btn-danger btn-secondary").addClass("btn-primary").off("click").html(`<i class="fa-solid fa-cog fa-spin"></i> <span class="ps-3" id='task-label'>Starting</span>`);
        const taskList = [
            {
                label: "Downloading",
                handler: () => {

                }
            },
            {
                label: "Extracting",
                handler: () => {

                }
            },
            {
                label: "Installing",
                handler: () => {

                }
            },
            {
                label: "Finishing",
                handler: () => {

                }
            }
        ];

        function startTask(idx = 0) {

            // Use the navigator.sendBeacon method for abort requests
            window.addEventListener('beforeunload', function (event) {
                const url = "{{'settings/abort-update'|access_path}}";
                const data = new FormData();
                data.append('task', idx);
                data.append('csrf_token', "{{csrf_token()}}");

                navigator.sendBeacon(url, data);
                // Optionally, you can set a message to show on the confirmation dialog
                event.returnValue = "Are you sure you want to leave?"; // Most browsers will ignore this and just show their default message
            });
            const task = taskList[idx];
            $("#task-label").text(task.label);
            __.http.post("{{'settings/do-update'|access_path}}", { task: idx, csrf_token: "{{csrf_token()}}" })
                .then((response) => {
                    setTimeout(() => {
                        task.handler(response);
                        if (taskList.length > idx + 1) {
                            startTask(idx + 1);
                        } else {
                            updateFinish();
                        }
                    }, 1000);
                })
                .catch(err => {
                    $this.text("Update Failed").removeClass("btn-primary").addClass("btn-danger").on('click', startUpdate)
                    __.toast(err.message || "Caught an error", 5, 'text-danger');
                })
        }

        function updateFinish() {
            $this.text("Update Finished").removeClass("btn-primary").addClass("btn-success").off("click")
        }

        function updateAbort() {

        }

        startTask();
    }

    $(() => {
        setTimeout(() => {
            $("#check-update-btn").trigger("click")
        }, 400);
    })

</script>

<script>
    function checkUpdateForModule(module_name) {
        __.http.get("{{'settings/module/check-update'|access_path}}", { name: module_name })
            .then((result) => handleCheckUpdateResultForModule(result.data)).catch((err) => {
                __.toast(err.message || "Failed to check update", 5, 'text-danger');
            });
    }

    function handleCheckUpdateResultForModule(data) {
        if (data.update_status && data.name) {
            // update availabel
            $("#btn-update-" + data.name)
                .text("Update Available")
                .removeAttr("onclick")
                .off("click")
                .on("click", () => {
                    window.location.href = "{{'settings/module/view-'|access_path}}" + btoa(data.name)
                })
                .toggleClass("btn-outline-secondary btn-outline-primary");
        } else {
            // is uptodate
            $("#btn-update-" + data.name).text("it's the latest version ðŸŽ‰").attr("disabled", "true").toggleClass("btn-outline-secondary btn-outline-success");
        }
    }
</script>
{% endblock %}